spring:
  application:
    name: eureka-server #用于注册到eureka的名称,消费服务根据这个名,获取生产者的overlay的ip和端口号
  cloud:
    inetutils:
      preferredNetworks: #使用以下ip开头
      - 10.0

server:
  port: 8761

eureka:
  instance:
    hostname: eureka-server      #Eureka实例的主机名
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${spring.cloud.client.ip-address}:${spring.application.instance_id:${server.port}}
    lease-expiration-duration-in-seconds: 15 #服务过期时间配置,超过这个时间没有接收到心跳EurekaServer就会将这个实例剔除 #注意，EurekaServer一定要设置eureka.server.eviction-interval-timer-in-ms否则这个配置无效，这个配置一般为服务刷新时间配置的三倍
    lease-renewal-interval-in-seconds: 5 #服务刷新时间配置，每隔这个时间会主动心跳一次
  client:
    serviceUrl:
      defaultZone: ${ADDITIONAL_EUREKA_SERVER_LIST} #Eureka节点相互注册
      register-with-eureka: true
      registryFetchIntervalSeconds: 5 #eureka client刷新本地缓存时间
  server:
    responseCacheUpdateIntervalMs: 3000 #eureka server刷新readCacheMap的时间，注意，client读取的是readCacheMap，这个时间决定了多久会把readWriteCacheMap的缓存更新到readCacheMap上
    responseCacheAutoExpirationInSeconds: 180 #eureka server缓存readWriteCacheMap失效时间，这个只有在这个时间过去后缓存才会失效，失效前不会更新，过期后从registry重新读取注册服务信息，registry是一个ConcurrentHashMap。#由于启用了evict其实就用不太上改这个配置了
    eviction-interval-timer-in-ms: 3000 #启用主动失效，并且每次主动失效检测间隔为3s